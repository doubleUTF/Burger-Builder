{"version":3,"sources":["burger-builder/components/UI/Input/Input.js","burger-builder/components/UI/Input/Input.module.css","burger-builder/components/Order/CheckoutSummary/CheckoutSummary.module.css","burger-builder/containers/Checkout/ContactData/ContactData.module.css","burger-builder/components/Order/CheckoutSummary/CheckoutSummary.js","burger-builder/containers/Checkout/ContactData/ContactData.js","burger-builder/containers/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","styles","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","onChange","changed","elementConfig","value","options","map","option","key","displayValue","Input","Label","label","module","exports","checkoutSummary","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","type","placeholder","validation","required","valid","email","country","street","zipCode","minLength","maxLength","deliveryMethod","formIsValid","orderHandler","event","preventDefault","formData","formElementId","order","ings","price","total","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidation","updatedOrderForm","inputName","setState","formElements","this","id","config","formElementsArray","formElement","form","onSubmit","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","purchaseBurger","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component"],"mappings":"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","file":"static/js/3.8ca80f5e.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = props => {\r\n  let inputElement;\r\n  const inputClasses = [styles.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></input>\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={styles.InputElement}\r\n          onChange={props.changed}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></textarea>\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={styles.InputElement}\r\n          onChange={props.changed}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map(option => (\r\n            <option value={option.value} key={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={styles.InputElement}\r\n          onChange={props.changed}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></input>\r\n      );\r\n  }\r\n  return (\r\n    <div className={styles.Input}>\r\n      <label className={styles.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1RSrN\",\"Label\":\"Input_Label__1akck\",\"InputElement\":\"Input_InputElement__oEmXb\",\"Invalid\":\"Input_Invalid__1QMyl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__1-5u4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__3i_7B\"};","import React from \"react\";\r\nimport Burger from \"../../Burger/Burger\";\r\nimport Button from \"../../UI/Button/Button\";\r\nimport classes from \"./CheckoutSummary.module.css\";\r\n\r\nconst checkoutSummary = props => {\r\n  return (\r\n    <div className={classes.CheckoutSummary}>\r\n      <h1>We hope it tastes well!</h1>\r\n      <div style={{ width: \"100%\", margin: \"auto\" }}>\r\n        <Burger ingredients={props.ingredients}></Burger>\r\n      </div>\r\n      <Button btnType=\"Danger\" clicked={props.checkoutCancelled}>\r\n        CANCEL\r\n      </Button>\r\n      <Button btnType=\"Success\" clicked={props.checkoutContinued}>\r\n        CONTINUE\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkoutSummary;\r\n","import React, { Component } from \"react\";\r\nimport Button from \"../../../components/UI/Button/Button\";\r\nimport classes from \"./ContactData.module.css\";\r\nimport axios from \"../../../axios-orders\";\r\nimport Spinner from \"../../../components/UI/Spinner/Spinner\";\r\nimport Input from \"../../../components/UI/Input/Input\";\r\nimport { connect } from \"react-redux\";\r\nimport withErrorHandler from \"../../../hoc/withErrorHandler\";\r\nimport { purchaseBurger } from \"../../../store/actions/index\";\r\nimport { updateObject, checkValidation } from \"../../../shared/utility\";\r\n\r\nclass ContactData extends Component {\r\n  state = {\r\n    orderForm: {\r\n      name: {\r\n        elementType: \"input\",\r\n        elementConfig: { type: \"text\", placeholder: \"Your Name\" },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: { type: \"email\", placeholder: \"Email\" },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      country: {\r\n        elementType: \"input\",\r\n        elementConfig: { type: \"text\", placeholder: \"Country\" },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      street: {\r\n        elementType: \"input\",\r\n        elementConfig: { type: \"text\", placeholder: \"Street\" },\r\n        value: \"\",\r\n        validation: {\r\n          required: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      zipCode: {\r\n        elementType: \"input\",\r\n        elementConfig: { type: \"text\", placeholder: \"Zip Code\" },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 5,\r\n          maxLength: 5\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      deliveryMethod: {\r\n        elementType: \"select\",\r\n        elementConfig: {\r\n          options: [\r\n            { value: \"fastest\", displayValue: \"Fastest\" },\r\n            { value: \"cheapest\", displayValue: \"Cheapest\" }\r\n          ]\r\n        },\r\n        value: \"fastest\",\r\n        valid: true\r\n      }\r\n    },\r\n    formIsValid: false\r\n  };\r\n\r\n  orderHandler = event => {\r\n    event.preventDefault();\r\n    const formData = {};\r\n\r\n    for (let formElementId in this.state.orderForm) {\r\n      formData[formElementId] = this.state.orderForm[formElementId].value;\r\n    }\r\n\r\n    const order = {\r\n      ingredients: this.props.ings,\r\n      price: this.props.total,\r\n      orderData: formData,\r\n      userId: this.props.userId\r\n    };\r\n\r\n    this.props.onOrderBurger(order, this.props.token);\r\n  };\r\n\r\n  inputChangedHandler = (event, inputIdentifier) => {\r\n    const updatedFormElement = updateObject(\r\n      this.state.orderForm[inputIdentifier],\r\n      {\r\n        value: event.target.value,\r\n        valid: checkValidation(\r\n          event.target.value,\r\n          this.state.orderForm[inputIdentifier].validation\r\n        ),\r\n        touched: true\r\n      }\r\n    );\r\n    const updatedOrderForm = updateObject(this.state.orderForm, {\r\n      [inputIdentifier]: updatedFormElement\r\n    });\r\n    let formIsValid = true;\r\n    for (let inputName in updatedOrderForm) {\r\n      formIsValid = updatedOrderForm[inputName].valid && formIsValid;\r\n    }\r\n    this.setState({ orderForm: updatedOrderForm, formIsValid });\r\n  };\r\n\r\n  render() {\r\n    const formElements = [];\r\n    for (let key in this.state.orderForm) {\r\n      formElements.push({ id: key, config: this.state.orderForm[key] });\r\n    }\r\n    let formElementsArray = formElements.map(formElement => (\r\n      <Input\r\n        key={formElement.id}\r\n        elementType={formElement.config.elementType}\r\n        elementConfig={formElement.config.elementConfig}\r\n        value={formElement.config.value}\r\n        invalid={!formElement.config.valid}\r\n        changed={event => this.inputChangedHandler(event, formElement.id)}\r\n        shouldValidate={formElement.config.validation}\r\n        touched={formElement.config.touched}\r\n      ></Input>\r\n    ));\r\n    let form = (\r\n      <form onSubmit={this.orderHandler}>\r\n        {formElementsArray}\r\n        <Button btnType=\"Success\" disabled={!this.state.formIsValid}>\r\n          ORDER\r\n        </Button>\r\n      </form>\r\n    );\r\n    if (this.props.loading) {\r\n      form = <Spinner></Spinner>;\r\n    }\r\n    return (\r\n      <div className={classes.ContactData}>\r\n        <h4>Enter your Contact Data</h4>\r\n        {form}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    total: state.burgerBuilder.totalPrice,\r\n    loading: state.order.loading,\r\n    token: state.auth.token,\r\n    userId: state.auth.userId\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onOrderBurger: (orderData, token) =>\r\n      dispatch(purchaseBurger(orderData, token))\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(withErrorHandler(ContactData, axios));\r\n","import React, { Component, Fragment } from \"react\";\r\nimport CheckoutSummary from \"../../components/Order/CheckoutSummary/CheckoutSummary\";\r\nimport ContactData from \"./ContactData/ContactData\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Checkout extends Component {\r\n  checkoutCancelledHandler = () => {\r\n    this.props.history.goBack();\r\n  };\r\n\r\n  checkoutContinuedHandler = () => {\r\n    this.props.history.replace(\"/checkout/contact-data\");\r\n  };\r\n\r\n  render() {\r\n    let summary = <Redirect to=\"/\"></Redirect>;\r\n    const purchasedRedirect = this.props.purchased && (\r\n      <Redirect to=\"/\"></Redirect>\r\n    );\r\n    if (this.props.ings) {\r\n      summary = (\r\n        <Fragment>\r\n          {purchasedRedirect}\r\n          <CheckoutSummary\r\n            ingredients={this.props.ings}\r\n            checkoutCancelled={this.checkoutCancelledHandler}\r\n            checkoutContinued={this.checkoutContinuedHandler}\r\n          ></CheckoutSummary>\r\n          <Route\r\n            path={this.props.match.path + \"/contact-data\"}\r\n            component={ContactData}\r\n          ></Route>\r\n        </Fragment>\r\n      );\r\n    }\r\n\r\n    return summary;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    ings: state.burgerBuilder.ingredients,\r\n    purchased: state.order.purchased\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Checkout);\r\n"],"sourceRoot":""}