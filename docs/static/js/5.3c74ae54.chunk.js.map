{"version":3,"sources":["burger-builder/components/UI/Input/Input.js","burger-builder/components/UI/Input/Input.module.css","burger-builder/containers/Auth/Auth.module.css","burger-builder/containers/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","styles","InputElement","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","onChange","changed","elementConfig","value","options","map","option","key","displayValue","Input","Label","label","module","exports","Auth","state","controls","email","type","placeholder","validation","required","isEmail","valid","password","minLength","isSignUp","switchAuthModeHandler","setState","prevState","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidation","onSubmitHandler","preventDefault","onAuth","this","isBuilding","authRedirectPath","onSetAuthRedirectPath","isAuth","to","formElements","id","config","form","loading","formElement","errorMessage","error","message","AuthStyles","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","setAuthRedirectPath"],"mappings":"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","file":"static/js/5.3c74ae54.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./Input.module.css\";\r\n\r\nconst input = props => {\r\n  let inputElement;\r\n  const inputClasses = [styles.InputElement];\r\n\r\n  if (props.invalid && props.shouldValidate && props.touched) {\r\n    inputClasses.push(styles.Invalid);\r\n  }\r\n\r\n  switch (props.elementType) {\r\n    case \"input\":\r\n      inputElement = (\r\n        <input\r\n          className={inputClasses.join(\" \")}\r\n          onChange={props.changed}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></input>\r\n      );\r\n      break;\r\n    case \"textarea\":\r\n      inputElement = (\r\n        <textarea\r\n          className={styles.InputElement}\r\n          onChange={props.changed}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></textarea>\r\n      );\r\n      break;\r\n    case \"select\":\r\n      inputElement = (\r\n        <select\r\n          className={styles.InputElement}\r\n          onChange={props.changed}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        >\r\n          {props.elementConfig.options.map(option => (\r\n            <option value={option.value} key={option.value}>\r\n              {option.displayValue}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      );\r\n      break;\r\n    default:\r\n      inputElement = (\r\n        <input\r\n          className={styles.InputElement}\r\n          onChange={props.changed}\r\n          {...props.elementConfig}\r\n          value={props.value}\r\n        ></input>\r\n      );\r\n  }\r\n  return (\r\n    <div className={styles.Input}>\r\n      <label className={styles.Label}>{props.label}</label>\r\n      {inputElement}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default input;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1RSrN\",\"Label\":\"Input_Label__1akck\",\"InputElement\":\"Input_InputElement__oEmXb\",\"Invalid\":\"Input_Invalid__1QMyl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__3zWk7\"};","import React, { Component } from \"react\";\r\nimport Input from \"../../components/UI/Input/Input\";\r\nimport Button from \"../../components/UI/Button/Button\";\r\nimport AuthStyles from \"./Auth.module.css\";\r\nimport { auth } from \"../../store/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { setAuthRedirectPath } from \"../../store/actions\";\r\nimport { updateObject, checkValidation } from \"../../shared/utility\";\r\n\r\nclass Auth extends Component {\r\n  state = {\r\n    controls: {\r\n      email: {\r\n        elementType: \"input\",\r\n        elementConfig: { type: \"email\", placeholder: \"Email\" },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          isEmail: true\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      },\r\n      password: {\r\n        elementType: \"input\",\r\n        elementConfig: { type: \"password\", placeholder: \"Password\" },\r\n        value: \"\",\r\n        validation: {\r\n          required: true,\r\n          minLength: 6\r\n        },\r\n        valid: false,\r\n        touched: false\r\n      }\r\n    },\r\n    isSignUp: false\r\n  };\r\n\r\n  switchAuthModeHandler = () => {\r\n    this.setState(prevState => {\r\n      return { isSignUp: !prevState.isSignUp };\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (!this.props.isBuilding && this.props.authRedirectPath !== \"/\") {\r\n      this.props.onSetAuthRedirectPath();\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, controlName) => {\r\n    const updatedControls = updateObject(this.state.controls, {\r\n      [controlName]: updateObject(this.state.controls[controlName], {\r\n        value: event.target.value,\r\n        valid: checkValidation(\r\n          event.target.value,\r\n          this.state.controls[controlName].validation\r\n        ),\r\n        touched: true\r\n      })\r\n    });\r\n    this.setState({ controls: updatedControls });\r\n  };\r\n\r\n  onSubmitHandler = event => {\r\n    event.preventDefault();\r\n    this.props.onAuth(\r\n      this.state.controls.email.value,\r\n      this.state.controls.password.value,\r\n      this.state.isSignUp\r\n    );\r\n  };\r\n\r\n  render() {\r\n    if (this.props.isAuth)\r\n      return <Redirect to={this.props.authRedirectPath}></Redirect>;\r\n\r\n    const formElements = [];\r\n    for (let key in this.state.controls) {\r\n      formElements.push({ id: key, config: this.state.controls[key] });\r\n    }\r\n\r\n    let form = this.props.loading ? (\r\n      <Spinner></Spinner>\r\n    ) : (\r\n      formElements.map(formElement => {\r\n        return (\r\n          <Input\r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementConfig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            changed={event => this.inputChangedHandler(event, formElement.id)}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n          ></Input>\r\n        );\r\n      })\r\n    );\r\n\r\n    let errorMessage = this.props.error && <p>{this.props.error.message}</p>;\r\n    return (\r\n      <div className={AuthStyles.Auth}>\r\n        {errorMessage}\r\n        <form onSubmit={this.onSubmitHandler}>\r\n          {form}\r\n          <Button btnType=\"Success\">Submit</Button>\r\n        </form>\r\n        <Button btnType=\"Danger\" clicked={this.switchAuthModeHandler}>\r\n          Switch To {this.state.isSignUp ? \"Sign In\" : \"Sign Up\"}\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    loading: state.auth.loading,\r\n    error: state.auth.error,\r\n    isAuth: !!state.auth.token,\r\n    isBuilding: state.burgerBuilder.building,\r\n    authRedirectPath: state.auth.authRedirectPath\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onAuth: (email, password, isSignUp) => {\r\n      dispatch(auth(email, password, isSignUp));\r\n    },\r\n    onSetAuthRedirectPath: () => dispatch(setAuthRedirectPath(\"/\"))\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\r\n"],"sourceRoot":""}